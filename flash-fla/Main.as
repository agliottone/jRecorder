package {	import flash.display.*;	import flash.media.Microphone;	import flash.system.Security;	import org.bytearray.micrecorder.*;	import org.bytearray.micrecorder.events.RecordingEvent;	import org.bytearray.micrecorder.encoder.WaveEncoder;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.events.ActivityEvent;	import fl.transitions.Tween;	import fl.transitions.easing.Strong;	import flash.net.FileReference;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.display.LoaderInfo;	import flash.external.ExternalInterface;	import flash.display.Sprite;    import flash.net.navigateToURL;    import flash.net.URLVariables;	import flash.net.*;	import be.nascom.flash.net.upload.UploadPostHelper;	import flash.events.*;	import flash.ui.Keyboard;	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.geom.*;	import flash.utils.*;	import flash.net.*;	import flash.system.*;		import src.events.*;	import src.image.*;	import src.file.*;	import src.load.*;	import src.ui.*;	import flash.media.Sound;	import org.as3wavsound.WavSound;	import org.as3wavsound.WavSoundChannel;			public class Main extends Sprite	{		private var mic:Microphone;		private var waveEncoder:WaveEncoder = new WaveEncoder();		private var recorder:MicRecorder = new MicRecorder(waveEncoder);		private var recBar:RecBar = new RecBar();				private var maxTime:Number = 30;				private var tween:Tween;		private var fileReference:FileReference = new FileReference();				private var tts:WavSound;		public function Main():void		{ 					trace('recoding'); 		 Security.allowDomain( '*' );			// replace * with your domain;			Security.allowInsecureDomain( '*' );	// replace * with your domain;		 	recButton.visible = false;			create.addEventListener( MouseEvent.CLICK, jSendFileToServer );			activity.visible = false ;			create..visible = true ;			godText.visible = false;			recBar.visible = false;						mic = Microphone.getMicrophone();			mic.setSilenceLevel(5);			mic.gain = 50;			mic.setLoopBack(false);			mic.setUseEchoSuppression(true);			Security.showSettings("2");			addListeners();		}				private function addListeners():void		{									recorder.addEventListener(RecordingEvent.RECORDING, recording);			recorder.addEventListener(Event.COMPLETE, recordComplete);			activity.addEventListener(Event.ENTER_FRAME, updateMeter);			 			 			//accept call from javascript to start recording			ExternalInterface.addCallback("jStartRecording", jStartRecording);			ExternalInterface.addCallback("jStopRecording", jStopRecording);			ExternalInterface.addCallback("jPlay", jPlay);			ExternalInterface.addCallback("jSendFileToServer", jSendFileToServer);								}								//external java script function call to start record		public function jStartRecording(max_time):void		{						maxTime = max_time;						if (mic != null)			{				recorder.record();				ExternalInterface.call("$.jRecorder.callback_started_recording");							}			else			{				ExternalInterface.call("$.jRecorder.callback_error_recording", 0);			}		}				//external javascript function to trigger stop recording		public function jStopRecording():void		{			recorder.stop();			mic.setLoopBack(false);			ExternalInterface.call("$.jRecorder.callback_stopped_recording");						//finalize_recording();					}		public function jPlay () : void		{						preview_recording(); 					}				public function jSendFileToServer ( e : MouseEvent ) : void		{						finalize_recording();					}						public function jStopPreview():void		{						//no function is currently available;		}						private function updateMeter(e:Event):void		{						ExternalInterface.call("$.jRecorder.callback_activityLevel",  mic.activityLevel);					}		private function recording(e:RecordingEvent):void		{			var currentTime:int = Math.floor(e.time / 1000);						ExternalInterface.call("$.jRecorder.callback_activityTime",  String(currentTime) );			 						if(currentTime == maxTime )			{				jStopRecording();			}			 					}		private function recordComplete(e:Event):void		{			//fileReference.save(recorder.output, "recording.wav");									//finalize_recording();						preview_recording(); 								}				public function preview_recording():void		{						tts = new WavSound(recorder.output);			tts.play();						ExternalInterface.call("$.jRecorder.callback_started_preview");								}	 private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }        private function completeHandler(event:Event):void {            var loader:URLLoader = URLLoader(event.target);            trace("completeHandler: " + loader.data);			ExternalInterface.call("$.jRecorder.traccia","completeHandler: " + loader.data);        }        private function openHandler(event:Event):void {            trace("openHandler: " + event);			ExternalInterface.call("$.jRecorder.traccia","openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);			ExternalInterface.call("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("securityErrorHandler: " + event);			ExternalInterface.call("securityErrorHandler: " + event);        }        private function httpStatusHandler(event:HTTPStatusEvent):void {            trace("httpStatusHandler: " + event);			ExternalInterface.call("httpStatusHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);			ExternalInterface.call("ioErrorHandler: " + event);        }				//functioon send data to server		public function finalize_recording():void		{			trace('sdsd');			var _var1:String= '';						var globalParam = LoaderInfo(this.root.loaderInfo).parameters;			for (var element:String in globalParam) {     		if (element == 'host'){           	_var1 =   globalParam[element];     			}																	}									ExternalInterface.call("$.jRecorder.callback_finished_recording");						if(_var1 != '')			{								var validazione:Boolean = ExternalInterface.call("$.jRecorder.callback_validateform");if (validazione){//var input_nome:String = ExternalInterface.call("$.jRecorder.get_nome");//var input_cognome:String = ExternalInterface.call("$.jRecorder.get_cognome");			if(recorder.output){var req:URLRequest = new URLRequest(_var1);req.method = URLRequestMethod.POST;var postVariables:Object = {datisupplementari:'dato1',dato2:'dato2'}var urlRequest:URLRequest = new URLRequest();urlRequest.url = _var1;urlRequest.contentType = 'multipart/form-data; boundary=' + UploadPostHelper.getBoundary();urlRequest.method = URLRequestMethod.POST;urlRequest.data = UploadPostHelper.getPostData( 'hello.wav', recorder.output,postVariables); //here is where the magic happens, filedata will be the name to retrieve the fileurlRequest.requestHeaders.push( new URLRequestHeader( 'Cache-Control', 'no-cache' ) );var urlLoader:URLLoader = new URLLoader();            configureListeners(urlLoader);urlLoader.dataFormat = URLLoaderDataFormat.BINARY;urlLoader.load(urlRequest); 				ExternalInterface.call("$.jRecorder.callback_finished_sending");			}else{				ExternalInterface.call("$.jRecorder.callback_htmlsubmit");				}								}else{				ExternalInterface.call("$.jRecorder.callback_validateformerror");				}											}					}				private function getFlashVars():Object {		return Object( LoaderInfo( this.loaderInfo ).parameters );		}	}}